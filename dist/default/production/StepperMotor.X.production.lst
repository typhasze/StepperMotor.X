

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Feb 07 14:42:43 2020

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F97J60
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	text8,global,reloc=2,class=CODE,delta=1
    16                           	psect	text9,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    19  0000                     _PORTD	set	3971
    20  0000                     _TRISD	set	3989
    21                           
    22                           ; #config settings
    23  0000                     
    24                           	psect	cinit
    25  01FD1A                     __pcinit:
    26                           	opt stack 0
    27  01FD1A                     start_initialization:
    28                           	opt stack 0
    29  01FD1A                     __initialization:
    30                           	opt stack 0
    31  01FD1A                     end_of_initialization:
    32                           	opt stack 0
    33  01FD1A                     __end_of__initialization:
    34                           	opt stack 0
    35  01FD1A  0100               	movlb	0
    36  01FD1C  EF94  F0FE         	goto	_main	;jump to C main() function
    37                           
    38                           	psect	cstackCOMRAM
    39  000001                     __pcstackCOMRAM:
    40                           	opt stack 0
    41  000001                     delay_ms@x:
    42                           	opt stack 0
    43                           
    44                           ; 2 bytes @ 0x0
    45  000001                     	ds	2
    46  000003                     ??_delay_ms:
    47                           
    48                           ; 1 bytes @ 0x2
    49  000003                     	ds	1
    50  000004                     delay_ms@i:
    51                           	opt stack 0
    52                           
    53                           ; 2 bytes @ 0x3
    54  000004                     	ds	2
    55  000006                     spinMotor@rate:
    56                           	opt stack 0
    57  000006                     oscillateMotor@rate:
    58                           	opt stack 0
    59                           
    60                           ; 2 bytes @ 0x5
    61  000006                     	ds	2
    62  000008                     spinMotor@direction:
    63                           	opt stack 0
    64  000008                     oscillateMotor@step:
    65                           	opt stack 0
    66                           
    67                           ; 2 bytes @ 0x7
    68  000008                     	ds	2
    69  00000A                     ??_oscillateMotor:
    70  00000A                     spinMotor@i:
    71                           	opt stack 0
    72                           
    73                           ; 2 bytes @ 0x9
    74  00000A                     	ds	1
    75  00000B                     oscillateMotor@j:
    76                           	opt stack 0
    77                           
    78                           ; 2 bytes @ 0xA
    79  00000B                     	ds	1
    80  00000C                     wash@cycle:
    81                           	opt stack 0
    82  00000C                     dry@cycle:
    83                           	opt stack 0
    84                           
    85                           ; 2 bytes @ 0xB
    86  00000C                     	ds	1
    87  00000D                     rinse@cycle:
    88                           	opt stack 0
    89                           
    90                           ; 2 bytes @ 0xC
    91  00000D                     	ds	1
    92  00000E                     ??_wash:
    93  00000E                     ??_dry:
    94                           
    95                           ; 1 bytes @ 0xD
    96  00000E                     	ds	1
    97  00000F                     ??_rinse:
    98  00000F                     wash@i:
    99                           	opt stack 0
   100  00000F                     dry@i:
   101                           	opt stack 0
   102                           
   103                           ; 2 bytes @ 0xE
   104  00000F                     	ds	1
   105  000010                     rinse@i:
   106                           	opt stack 0
   107                           
   108                           ; 2 bytes @ 0xF
   109  000010                     	ds	2
   110  000012                     normalWashMode@cycle:
   111                           	opt stack 0
   112                           
   113                           ; 2 bytes @ 0x11
   114  000012                     	ds	2
   115  000014                     
   116                           ; 1 bytes @ 0x13
   117 ;;
   118 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   119 ;;
   120 ;; *************** function _main *****************
   121 ;; Defined at:
   122 ;;		line 12 in file "Test.c"
   123 ;; Parameters:    Size  Location     Type
   124 ;;		None
   125 ;; Auto vars:     Size  Location     Type
   126 ;;		None
   127 ;; Return value:  Size  Location     Type
   128 ;;                  1    wreg      void 
   129 ;; Registers used:
   130 ;;		wreg, status,2, status,0, cstack
   131 ;; Tracked objects:
   132 ;;		On entry : 0/0
   133 ;;		On exit  : 0/0
   134 ;;		Unchanged: 0/0
   135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   140 ;;Total ram usage:        0 bytes
   141 ;; Hardware stack levels required when called:    4
   142 ;; This function calls:
   143 ;;		_normalWashMode
   144 ;;		_startMotor
   145 ;;		_stopMotor
   146 ;; This function is called by:
   147 ;;		Startup code after reset
   148 ;; This function uses a non-reentrant model
   149 ;;
   150                           
   151                           	psect	text0
   152  01FD28                     __ptext0:
   153                           	opt stack 0
   154  01FD28                     _main:
   155                           	opt stack 27
   156                           
   157                           ;Test.c: 13: startMotor();
   158                           
   159                           ;incstack = 0
   160  01FD28  EC8A  F0FE         	call	_startMotor	;wreg free
   161  01FD2C                     l977:
   162                           
   163                           ;Test.c: 21: normalWashMode();
   164  01FD2C  EC9B  F0FE         	call	_normalWashMode	;wreg free
   165                           
   166                           ;Test.c: 23: stopMotor();
   167  01FD30  EC90  F0FE         	call	_stopMotor	;wreg free
   168  01FD34  D7FB               	goto	l977
   169  01FD36                     __end_of_main:
   170                           	opt stack 0
   171                           
   172 ;; *************** function _stopMotor *****************
   173 ;; Defined at:
   174 ;;		line 21 in file "Motor.c"
   175 ;; Parameters:    Size  Location     Type
   176 ;;		None
   177 ;; Auto vars:     Size  Location     Type
   178 ;;		None
   179 ;; Return value:  Size  Location     Type
   180 ;;                  1    wreg      void 
   181 ;; Registers used:
   182 ;;		wreg, status,2
   183 ;; Tracked objects:
   184 ;;		On entry : 0/0
   185 ;;		On exit  : 0/0
   186 ;;		Unchanged: 0/0
   187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   192 ;;Total ram usage:        0 bytes
   193 ;; Hardware stack levels used:    1
   194 ;; This function calls:
   195 ;;		Nothing
   196 ;; This function is called by:
   197 ;;		_main
   198 ;; This function uses a non-reentrant model
   199 ;;
   200                           
   201                           	psect	text1
   202  01FD20                     __ptext1:
   203                           	opt stack 0
   204  01FD20                     _stopMotor:
   205                           	opt stack 30
   206                           
   207                           ;Motor.c: 22: PORTD = 0x00;
   208                           
   209                           ;incstack = 0
   210  01FD20  0E00               	movlw	0
   211  01FD22  6E83               	movwf	3971,c	;volatile
   212                           
   213                           ;Motor.c: 23: TRISD = 0xFF;
   214  01FD24  6895               	setf	3989,c	;volatile
   215  01FD26  0012               	return		;funcret
   216  01FD28                     __end_of_stopMotor:
   217                           	opt stack 0
   218                           
   219 ;; *************** function _startMotor *****************
   220 ;; Defined at:
   221 ;;		line 17 in file "Motor.c"
   222 ;; Parameters:    Size  Location     Type
   223 ;;		None
   224 ;; Auto vars:     Size  Location     Type
   225 ;;		None
   226 ;; Return value:  Size  Location     Type
   227 ;;                  1    wreg      void 
   228 ;; Registers used:
   229 ;;		wreg, status,2
   230 ;; Tracked objects:
   231 ;;		On entry : 0/0
   232 ;;		On exit  : 0/0
   233 ;;		Unchanged: 0/0
   234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   239 ;;Total ram usage:        0 bytes
   240 ;; Hardware stack levels used:    1
   241 ;; This function calls:
   242 ;;		Nothing
   243 ;; This function is called by:
   244 ;;		_main
   245 ;; This function uses a non-reentrant model
   246 ;;
   247                           
   248                           	psect	text2
   249  01FD14                     __ptext2:
   250                           	opt stack 0
   251  01FD14                     _startMotor:
   252                           	opt stack 30
   253                           
   254                           ;Motor.c: 18: TRISD = 0;
   255                           
   256                           ;incstack = 0
   257  01FD14  0E00               	movlw	0
   258  01FD16  6E95               	movwf	3989,c	;volatile
   259  01FD18  0012               	return		;funcret
   260  01FD1A                     __end_of_startMotor:
   261                           	opt stack 0
   262                           
   263 ;; *************** function _normalWashMode *****************
   264 ;; Defined at:
   265 ;;		line 108 in file "Motor.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;		None
   268 ;; Auto vars:     Size  Location     Type
   269 ;;  cycle           2   17[COMRAM] int 
   270 ;; Return value:  Size  Location     Type
   271 ;;                  1    wreg      void 
   272 ;; Registers used:
   273 ;;		wreg, status,2, status,0, cstack
   274 ;; Tracked objects:
   275 ;;		On entry : 0/0
   276 ;;		On exit  : 0/0
   277 ;;		Unchanged: 0/0
   278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   283 ;;Total ram usage:        2 bytes
   284 ;; Hardware stack levels used:    1
   285 ;; Hardware stack levels required when called:    3
   286 ;; This function calls:
   287 ;;		_dry
   288 ;;		_rinse
   289 ;;		_wash
   290 ;; This function is called by:
   291 ;;		_main
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text3
   296  01FD36                     __ptext3:
   297                           	opt stack 0
   298  01FD36                     _normalWashMode:
   299                           	opt stack 27
   300                           
   301                           ;Motor.c: 109: int cycle = 5;
   302                           
   303                           ;incstack = 0
   304  01FD36  0E00               	movlw	0
   305  01FD38  6E13               	movwf	normalWashMode@cycle+1,c
   306  01FD3A  0E05               	movlw	5
   307  01FD3C  6E12               	movwf	normalWashMode@cycle,c
   308                           
   309                           ;Motor.c: 110: rinse(cycle);
   310  01FD3E  C012  F00D         	movff	normalWashMode@cycle,rinse@cycle
   311  01FD42  C013  F00E         	movff	normalWashMode@cycle+1,rinse@cycle+1
   312  01FD46  ECE8  F0FE         	call	_rinse	;wreg free
   313                           
   314                           ;Motor.c: 111: wash(cycle);
   315  01FD4A  C012  F00C         	movff	normalWashMode@cycle,wash@cycle
   316  01FD4E  C013  F00D         	movff	normalWashMode@cycle+1,wash@cycle+1
   317  01FD52  EC04  F0FF         	call	_wash	;wreg free
   318                           
   319                           ;Motor.c: 112: dry(cycle);
   320  01FD56  C012  F00C         	movff	normalWashMode@cycle,dry@cycle
   321  01FD5A  C013  F00D         	movff	normalWashMode@cycle+1,dry@cycle+1
   322  01FD5E  ECCC  F0FE         	call	_dry	;wreg free
   323  01FD62  0012               	return		;funcret
   324  01FD64                     __end_of_normalWashMode:
   325                           	opt stack 0
   326                           
   327 ;; *************** function _wash *****************
   328 ;; Defined at:
   329 ;;		line 94 in file "Motor.c"
   330 ;; Parameters:    Size  Location     Type
   331 ;;  cycle           2   11[COMRAM] int 
   332 ;; Auto vars:     Size  Location     Type
   333 ;;  i               2   14[COMRAM] int 
   334 ;; Return value:  Size  Location     Type
   335 ;;                  1    wreg      void 
   336 ;; Registers used:
   337 ;;		wreg, status,2, status,0, cstack
   338 ;; Tracked objects:
   339 ;;		On entry : 0/0
   340 ;;		On exit  : 0/0
   341 ;;		Unchanged: 0/0
   342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   343 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   344 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   346 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   347 ;;Total ram usage:        5 bytes
   348 ;; Hardware stack levels used:    1
   349 ;; Hardware stack levels required when called:    2
   350 ;; This function calls:
   351 ;;		_spinMotor
   352 ;; This function is called by:
   353 ;;		_normalWashMode
   354 ;;		_quickWashMode
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text4
   359  01FE08                     __ptext4:
   360                           	opt stack 0
   361  01FE08                     _wash:
   362                           	opt stack 27
   363                           
   364                           ;Motor.c: 96: for (int i = 0; i < cycle; i++) {
   365                           
   366                           ;incstack = 0
   367  01FE08  0E00               	movlw	0
   368  01FE0A  6E10               	movwf	wash@i+1,c
   369  01FE0C  0E00               	movlw	0
   370  01FE0E  6E0F               	movwf	wash@i,c
   371  01FE10  D00C               	goto	l941
   372  01FE12                     l937:
   373                           
   374                           ;Motor.c: 97: spinMotor(5, 0);
   375  01FE12  0E00               	movlw	0
   376  01FE14  6E07               	movwf	spinMotor@rate+1,c
   377  01FE16  0E05               	movlw	5
   378  01FE18  6E06               	movwf	spinMotor@rate,c
   379  01FE1A  0E00               	movlw	0
   380  01FE1C  6E09               	movwf	spinMotor@direction+1,c
   381  01FE1E  0E00               	movlw	0
   382  01FE20  6E08               	movwf	spinMotor@direction,c
   383  01FE22  EC20  F0FF         	call	_spinMotor	;wreg free
   384  01FE26  4A0F               	infsnz	wash@i,f,c
   385  01FE28  2A10               	incf	wash@i+1,f,c
   386  01FE2A                     l941:
   387  01FE2A  500C               	movf	wash@cycle,w,c
   388  01FE2C  5C0F               	subwf	wash@i,w,c
   389  01FE2E  5010               	movf	wash@i+1,w,c
   390  01FE30  0A80               	xorlw	128
   391  01FE32  6E0E               	movwf	??_wash& (0+255),c
   392  01FE34  500D               	movf	wash@cycle+1,w,c
   393  01FE36  0A80               	xorlw	128
   394  01FE38  580E               	subwfb	??_wash& (0+255),w,c
   395  01FE3A  B0D8               	btfsc	status,0,c
   396  01FE3C  0012               	return	
   397  01FE3E  D7E9               	goto	l937
   398  01FE40                     __end_of_wash:
   399                           	opt stack 0
   400                           status	equ	0xFD8
   401                           
   402 ;; *************** function _rinse *****************
   403 ;; Defined at:
   404 ;;		line 87 in file "Motor.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;  cycle           2   12[COMRAM] int 
   407 ;; Auto vars:     Size  Location     Type
   408 ;;  i               2   15[COMRAM] int 
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      void 
   411 ;; Registers used:
   412 ;;		wreg, status,2, status,0, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   421 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   422 ;;Total ram usage:        5 bytes
   423 ;; Hardware stack levels used:    1
   424 ;; Hardware stack levels required when called:    2
   425 ;; This function calls:
   426 ;;		_oscillateMotor
   427 ;; This function is called by:
   428 ;;		_normalWashMode
   429 ;;		_quickWashMode
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text5
   434  01FDD0                     __ptext5:
   435                           	opt stack 0
   436  01FDD0                     _rinse:
   437                           	opt stack 27
   438                           
   439                           ;Motor.c: 89: for (int i = 0; i < cycle; i++) {
   440                           
   441                           ;incstack = 0
   442  01FDD0  0E00               	movlw	0
   443  01FDD2  6E11               	movwf	rinse@i+1,c
   444  01FDD4  0E00               	movlw	0
   445  01FDD6  6E10               	movwf	rinse@i,c
   446  01FDD8  D00C               	goto	l933
   447  01FDDA                     l929:
   448                           
   449                           ;Motor.c: 90: oscillateMotor(5, 100);
   450  01FDDA  0E00               	movlw	0
   451  01FDDC  6E07               	movwf	oscillateMotor@rate+1,c
   452  01FDDE  0E05               	movlw	5
   453  01FDE0  6E06               	movwf	oscillateMotor@rate,c
   454  01FDE2  0E00               	movlw	0
   455  01FDE4  6E09               	movwf	oscillateMotor@step+1,c
   456  01FDE6  0E64               	movlw	100
   457  01FDE8  6E08               	movwf	oscillateMotor@step,c
   458  01FDEA  EC89  F0FF         	call	_oscillateMotor	;wreg free
   459  01FDEE  4A10               	infsnz	rinse@i,f,c
   460  01FDF0  2A11               	incf	rinse@i+1,f,c
   461  01FDF2                     l933:
   462  01FDF2  500D               	movf	rinse@cycle,w,c
   463  01FDF4  5C10               	subwf	rinse@i,w,c
   464  01FDF6  5011               	movf	rinse@i+1,w,c
   465  01FDF8  0A80               	xorlw	128
   466  01FDFA  6E0F               	movwf	??_rinse& (0+255),c
   467  01FDFC  500E               	movf	rinse@cycle+1,w,c
   468  01FDFE  0A80               	xorlw	128
   469  01FE00  580F               	subwfb	??_rinse& (0+255),w,c
   470  01FE02  B0D8               	btfsc	status,0,c
   471  01FE04  0012               	return	
   472  01FE06  D7E9               	goto	l929
   473  01FE08                     __end_of_rinse:
   474                           	opt stack 0
   475                           status	equ	0xFD8
   476                           
   477 ;; *************** function _oscillateMotor *****************
   478 ;; Defined at:
   479 ;;		line 56 in file "Motor.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  rate            2    5[COMRAM] int 
   482 ;;  step            2    7[COMRAM] int 
   483 ;; Auto vars:     Size  Location     Type
   484 ;;  j               2   10[COMRAM] int 
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg, status,2, status,0, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   497 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   498 ;;Total ram usage:        7 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; Hardware stack levels required when called:    1
   501 ;; This function calls:
   502 ;;		_delay_ms
   503 ;; This function is called by:
   504 ;;		_rinse
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           	psect	text6
   509  01FF12                     __ptext6:
   510                           	opt stack 0
   511  01FF12                     _oscillateMotor:
   512                           	opt stack 27
   513                           
   514                           ;Motor.c: 57: int j = 0;
   515                           
   516                           ;incstack = 0
   517  01FF12  0E00               	movlw	0
   518  01FF14  6E0C               	movwf	oscillateMotor@j+1,c
   519  01FF16  0E00               	movlw	0
   520  01FF18  6E0B               	movwf	oscillateMotor@j,c
   521                           
   522                           ;Motor.c: 59: for (; j < step ; j ++) {
   523  01FF1A  D02A               	goto	l905
   524  01FF1C                     l889:
   525                           
   526                           ;Motor.c: 60: PORTD = 0b00000011;
   527  01FF1C  0E03               	movlw	3
   528  01FF1E  6E83               	movwf	3971,c	;volatile
   529                           
   530                           ;Motor.c: 61: delay_ms(rate);
   531  01FF20  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   532  01FF24  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   533  01FF28  ECB2  F0FE         	call	_delay_ms	;wreg free
   534                           
   535                           ;Motor.c: 62: PORTD = 0b00000110;
   536  01FF2C  0E06               	movlw	6
   537  01FF2E  6E83               	movwf	3971,c	;volatile
   538                           
   539                           ;Motor.c: 63: delay_ms(rate);
   540  01FF30  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   541  01FF34  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   542  01FF38  ECB2  F0FE         	call	_delay_ms	;wreg free
   543                           
   544                           ;Motor.c: 64: PORTD = 0b00001100;
   545  01FF3C  0E0C               	movlw	12
   546  01FF3E  6E83               	movwf	3971,c	;volatile
   547                           
   548                           ;Motor.c: 65: delay_ms(rate);
   549  01FF40  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   550  01FF44  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   551  01FF48  ECB2  F0FE         	call	_delay_ms	;wreg free
   552                           
   553                           ;Motor.c: 66: PORTD = 0b00001001;
   554  01FF4C  0E09               	movlw	9
   555  01FF4E  6E83               	movwf	3971,c	;volatile
   556                           
   557                           ;Motor.c: 67: delay_ms(rate);
   558  01FF50  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   559  01FF54  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   560  01FF58  ECB2  F0FE         	call	_delay_ms	;wreg free
   561                           
   562                           ;Motor.c: 68: PORTD = 0b00000011;
   563  01FF5C  0E03               	movlw	3
   564  01FF5E  6E83               	movwf	3971,c	;volatile
   565                           
   566                           ;Motor.c: 69: delay_ms(rate);
   567  01FF60  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   568  01FF64  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   569  01FF68  ECB2  F0FE         	call	_delay_ms	;wreg free
   570  01FF6C  4A0B               	infsnz	oscillateMotor@j,f,c
   571  01FF6E  2A0C               	incf	oscillateMotor@j+1,f,c
   572  01FF70                     l905:
   573  01FF70  5008               	movf	oscillateMotor@step,w,c
   574  01FF72  5C0B               	subwf	oscillateMotor@j,w,c
   575  01FF74  500C               	movf	oscillateMotor@j+1,w,c
   576  01FF76  0A80               	xorlw	128
   577  01FF78  6E0A               	movwf	??_oscillateMotor& (0+255),c
   578  01FF7A  5009               	movf	oscillateMotor@step+1,w,c
   579  01FF7C  0A80               	xorlw	128
   580  01FF7E  580A               	subwfb	??_oscillateMotor& (0+255),w,c
   581  01FF80  A0D8               	btfss	status,0,c
   582  01FF82  D7CC               	goto	l889
   583                           
   584                           ;Motor.c: 70: }
   585                           ;Motor.c: 73: for (j = 0 ; j < step ; j++) {
   586  01FF84  0E00               	movlw	0
   587  01FF86  6E0C               	movwf	oscillateMotor@j+1,c
   588  01FF88  0E00               	movlw	0
   589  01FF8A  6E0B               	movwf	oscillateMotor@j,c
   590  01FF8C  D02A               	goto	l925
   591  01FF8E                     l909:
   592                           
   593                           ;Motor.c: 74: PORTD = 0b00001001;
   594  01FF8E  0E09               	movlw	9
   595  01FF90  6E83               	movwf	3971,c	;volatile
   596                           
   597                           ;Motor.c: 75: delay_ms(rate);
   598  01FF92  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   599  01FF96  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   600  01FF9A  ECB2  F0FE         	call	_delay_ms	;wreg free
   601                           
   602                           ;Motor.c: 76: PORTD = 0b00001100;
   603  01FF9E  0E0C               	movlw	12
   604  01FFA0  6E83               	movwf	3971,c	;volatile
   605                           
   606                           ;Motor.c: 77: delay_ms(rate);
   607  01FFA2  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   608  01FFA6  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   609  01FFAA  ECB2  F0FE         	call	_delay_ms	;wreg free
   610                           
   611                           ;Motor.c: 78: PORTD = 0b00000110;
   612  01FFAE  0E06               	movlw	6
   613  01FFB0  6E83               	movwf	3971,c	;volatile
   614                           
   615                           ;Motor.c: 79: delay_ms(rate);
   616  01FFB2  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   617  01FFB6  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   618  01FFBA  ECB2  F0FE         	call	_delay_ms	;wreg free
   619                           
   620                           ;Motor.c: 80: PORTD = 0b00000011;
   621  01FFBE  0E03               	movlw	3
   622  01FFC0  6E83               	movwf	3971,c	;volatile
   623                           
   624                           ;Motor.c: 81: delay_ms(rate);
   625  01FFC2  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   626  01FFC6  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   627  01FFCA  ECB2  F0FE         	call	_delay_ms	;wreg free
   628                           
   629                           ;Motor.c: 82: PORTD = 0b00001001;
   630  01FFCE  0E09               	movlw	9
   631  01FFD0  6E83               	movwf	3971,c	;volatile
   632                           
   633                           ;Motor.c: 83: delay_ms(rate);
   634  01FFD2  C006  F001         	movff	oscillateMotor@rate,delay_ms@x
   635  01FFD6  C007  F002         	movff	oscillateMotor@rate+1,delay_ms@x+1
   636  01FFDA  ECB2  F0FE         	call	_delay_ms	;wreg free
   637  01FFDE  4A0B               	infsnz	oscillateMotor@j,f,c
   638  01FFE0  2A0C               	incf	oscillateMotor@j+1,f,c
   639  01FFE2                     l925:
   640  01FFE2  5008               	movf	oscillateMotor@step,w,c
   641  01FFE4  5C0B               	subwf	oscillateMotor@j,w,c
   642  01FFE6  500C               	movf	oscillateMotor@j+1,w,c
   643  01FFE8  0A80               	xorlw	128
   644  01FFEA  6E0A               	movwf	??_oscillateMotor& (0+255),c
   645  01FFEC  5009               	movf	oscillateMotor@step+1,w,c
   646  01FFEE  0A80               	xorlw	128
   647  01FFF0  580A               	subwfb	??_oscillateMotor& (0+255),w,c
   648  01FFF2  B0D8               	btfsc	status,0,c
   649  01FFF4  0012               	return	
   650  01FFF6  D7CB               	goto	l909
   651  01FFF8                     __end_of_oscillateMotor:
   652                           	opt stack 0
   653                           status	equ	0xFD8
   654                           
   655 ;; *************** function _dry *****************
   656 ;; Defined at:
   657 ;;		line 101 in file "Motor.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  cycle           2   11[COMRAM] int 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  i               2   14[COMRAM] int 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, status,2, status,0, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   671 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   674 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;Total ram usage:        5 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    2
   678 ;; This function calls:
   679 ;;		_spinMotor
   680 ;; This function is called by:
   681 ;;		_normalWashMode
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           	psect	text7
   686  01FD98                     __ptext7:
   687                           	opt stack 0
   688  01FD98                     _dry:
   689                           	opt stack 27
   690                           
   691                           ;Motor.c: 103: for (int i = 0; i < cycle; i++) {
   692                           
   693                           ;incstack = 0
   694  01FD98  0E00               	movlw	0
   695  01FD9A  6E10               	movwf	dry@i+1,c
   696  01FD9C  0E00               	movlw	0
   697  01FD9E  6E0F               	movwf	dry@i,c
   698  01FDA0  D00C               	goto	l949
   699  01FDA2                     l945:
   700                           
   701                           ;Motor.c: 104: spinMotor(5, 1);
   702  01FDA2  0E00               	movlw	0
   703  01FDA4  6E07               	movwf	spinMotor@rate+1,c
   704  01FDA6  0E05               	movlw	5
   705  01FDA8  6E06               	movwf	spinMotor@rate,c
   706  01FDAA  0E00               	movlw	0
   707  01FDAC  6E09               	movwf	spinMotor@direction+1,c
   708  01FDAE  0E01               	movlw	1
   709  01FDB0  6E08               	movwf	spinMotor@direction,c
   710  01FDB2  EC20  F0FF         	call	_spinMotor	;wreg free
   711  01FDB6  4A0F               	infsnz	dry@i,f,c
   712  01FDB8  2A10               	incf	dry@i+1,f,c
   713  01FDBA                     l949:
   714  01FDBA  500C               	movf	dry@cycle,w,c
   715  01FDBC  5C0F               	subwf	dry@i,w,c
   716  01FDBE  5010               	movf	dry@i+1,w,c
   717  01FDC0  0A80               	xorlw	128
   718  01FDC2  6E0E               	movwf	??_dry& (0+255),c
   719  01FDC4  500D               	movf	dry@cycle+1,w,c
   720  01FDC6  0A80               	xorlw	128
   721  01FDC8  580E               	subwfb	??_dry& (0+255),w,c
   722  01FDCA  B0D8               	btfsc	status,0,c
   723  01FDCC  0012               	return	
   724  01FDCE  D7E9               	goto	l945
   725  01FDD0                     __end_of_dry:
   726                           	opt stack 0
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _spinMotor *****************
   730 ;; Defined at:
   731 ;;		line 26 in file "Motor.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  rate            2    5[COMRAM] int 
   734 ;;  direction       2    7[COMRAM] int 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  i               2    9[COMRAM] int 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   750 ;;Total ram usage:        6 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    1
   753 ;; This function calls:
   754 ;;		_delay_ms
   755 ;; This function is called by:
   756 ;;		_wash
   757 ;;		_dry
   758 ;;		_turboDry
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text8
   763  01FE40                     __ptext8:
   764                           	opt stack 0
   765  01FE40                     _spinMotor:
   766                           	opt stack 27
   767                           
   768                           ;Motor.c: 27: int i = 0;
   769                           
   770                           ;incstack = 0
   771  01FE40  0E00               	movlw	0
   772  01FE42  6E0B               	movwf	spinMotor@i+1,c
   773  01FE44  0E00               	movlw	0
   774  01FE46  6E0A               	movwf	spinMotor@i,c
   775  01FE48                     l847:
   776                           
   777                           ;Motor.c: 28: for (; i < 200; i++) {
   778  01FE48  BE0B               	btfsc	spinMotor@i+1,7,c
   779  01FE4A  D006               	goto	l851
   780  01FE4C  500B               	movf	spinMotor@i+1,w,c
   781  01FE4E  E160               	bnz	l36
   782  01FE50  0EC8               	movlw	200
   783  01FE52  5C0A               	subwf	spinMotor@i,w,c
   784  01FE54  B0D8               	btfsc	status,0,c
   785  01FE56  0012               	return	
   786  01FE58                     l851:
   787                           
   788                           ;Motor.c: 29: if (direction == 0 ){
   789  01FE58  5008               	movf	spinMotor@direction,w,c
   790  01FE5A  1009               	iorwf	spinMotor@direction+1,w,c
   791  01FE5C  A4D8               	btfss	status,2,c
   792  01FE5E  D029               	goto	l867
   793                           
   794                           ;Motor.c: 30: PORTD = 0b00000011;
   795  01FE60  0E03               	movlw	3
   796  01FE62  6E83               	movwf	3971,c	;volatile
   797                           
   798                           ;Motor.c: 31: delay_ms(rate);
   799  01FE64  C006  F001         	movff	spinMotor@rate,delay_ms@x
   800  01FE68  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   801  01FE6C  ECB2  F0FE         	call	_delay_ms	;wreg free
   802                           
   803                           ;Motor.c: 32: PORTD = 0b00000110;
   804  01FE70  0E06               	movlw	6
   805  01FE72  6E83               	movwf	3971,c	;volatile
   806                           
   807                           ;Motor.c: 33: delay_ms(rate);
   808  01FE74  C006  F001         	movff	spinMotor@rate,delay_ms@x
   809  01FE78  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   810  01FE7C  ECB2  F0FE         	call	_delay_ms	;wreg free
   811                           
   812                           ;Motor.c: 34: PORTD = 0b00001100;
   813  01FE80  0E0C               	movlw	12
   814  01FE82  6E83               	movwf	3971,c	;volatile
   815                           
   816                           ;Motor.c: 35: delay_ms(rate);
   817  01FE84  C006  F001         	movff	spinMotor@rate,delay_ms@x
   818  01FE88  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   819  01FE8C  ECB2  F0FE         	call	_delay_ms	;wreg free
   820                           
   821                           ;Motor.c: 36: PORTD = 0b00001001;
   822  01FE90  0E09               	movlw	9
   823  01FE92  6E83               	movwf	3971,c	;volatile
   824                           
   825                           ;Motor.c: 37: delay_ms(rate);
   826  01FE94  C006  F001         	movff	spinMotor@rate,delay_ms@x
   827  01FE98  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   828  01FE9C  ECB2  F0FE         	call	_delay_ms	;wreg free
   829                           
   830                           ;Motor.c: 38: PORTD = 0b00000011;
   831  01FEA0  0E03               	movlw	3
   832  01FEA2  6E83               	movwf	3971,c	;volatile
   833                           
   834                           ;Motor.c: 39: delay_ms(rate);
   835  01FEA4  C006  F001         	movff	spinMotor@rate,delay_ms@x
   836  01FEA8  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   837  01FEAC  ECB2  F0FE         	call	_delay_ms	;wreg free
   838                           
   839                           ;Motor.c: 40: }
   840  01FEB0  D02C               	goto	l883
   841  01FEB2                     l867:
   842                           
   843                           ;Motor.c: 41: else if (direction == 1){
   844  01FEB2  0408               	decf	spinMotor@direction,w,c
   845  01FEB4  1009               	iorwf	spinMotor@direction+1,w,c
   846  01FEB6  A4D8               	btfss	status,2,c
   847  01FEB8  D028               	goto	l883
   848                           
   849                           ;Motor.c: 42: PORTD = 0b00001001;
   850  01FEBA  0E09               	movlw	9
   851  01FEBC  6E83               	movwf	3971,c	;volatile
   852                           
   853                           ;Motor.c: 43: delay_ms(rate);
   854  01FEBE  C006  F001         	movff	spinMotor@rate,delay_ms@x
   855  01FEC2  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   856  01FEC6  ECB2  F0FE         	call	_delay_ms	;wreg free
   857                           
   858                           ;Motor.c: 44: PORTD = 0b00001100;
   859  01FECA  0E0C               	movlw	12
   860  01FECC  6E83               	movwf	3971,c	;volatile
   861                           
   862                           ;Motor.c: 45: delay_ms(rate);
   863  01FECE  C006  F001         	movff	spinMotor@rate,delay_ms@x
   864  01FED2  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   865  01FED6  ECB2  F0FE         	call	_delay_ms	;wreg free
   866                           
   867                           ;Motor.c: 46: PORTD = 0b00000110;
   868  01FEDA  0E06               	movlw	6
   869  01FEDC  6E83               	movwf	3971,c	;volatile
   870                           
   871                           ;Motor.c: 47: delay_ms(rate);
   872  01FEDE  C006  F001         	movff	spinMotor@rate,delay_ms@x
   873  01FEE2  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   874  01FEE6  ECB2  F0FE         	call	_delay_ms	;wreg free
   875                           
   876                           ;Motor.c: 48: PORTD = 0b00000011;
   877  01FEEA  0E03               	movlw	3
   878  01FEEC  6E83               	movwf	3971,c	;volatile
   879                           
   880                           ;Motor.c: 49: delay_ms(rate);
   881  01FEEE  C006  F001         	movff	spinMotor@rate,delay_ms@x
   882  01FEF2  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   883  01FEF6  ECB2  F0FE         	call	_delay_ms	;wreg free
   884                           
   885                           ;Motor.c: 50: PORTD = 0b00001001;
   886  01FEFA  0E09               	movlw	9
   887  01FEFC  6E83               	movwf	3971,c	;volatile
   888                           
   889                           ;Motor.c: 51: delay_ms(rate);
   890  01FEFE  C006  F001         	movff	spinMotor@rate,delay_ms@x
   891  01FF02  C007  F002         	movff	spinMotor@rate+1,delay_ms@x+1
   892  01FF06  ECB2  F0FE         	call	_delay_ms	;wreg free
   893  01FF0A                     l883:
   894  01FF0A  4A0A               	infsnz	spinMotor@i,f,c
   895  01FF0C  2A0B               	incf	spinMotor@i+1,f,c
   896  01FF0E  D79C               	goto	l847
   897  01FF10                     l36:
   898  01FF10  0012               	return		;funcret
   899  01FF12                     __end_of_spinMotor:
   900                           	opt stack 0
   901                           status	equ	0xFD8
   902                           
   903 ;; *************** function _delay_ms *****************
   904 ;; Defined at:
   905 ;;		line 4 in file "delay.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  x               2    0[COMRAM] int 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  i               2    3[COMRAM] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, status,2, status,0
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;Total ram usage:        5 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_spinMotor
   929 ;;		_oscillateMotor
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text9
   934  01FD64                     __ptext9:
   935                           	opt stack 0
   936  01FD64                     _delay_ms:
   937                           	opt stack 27
   938                           
   939                           ;delay.c: 6: for (int i = 0; i < x; i++)
   940                           
   941                           ;incstack = 0
   942  01FD64  0E00               	movlw	0
   943  01FD66  6E05               	movwf	delay_ms@i+1,c
   944  01FD68  0E00               	movlw	0
   945  01FD6A  6E04               	movwf	delay_ms@i,c
   946  01FD6C  D00A               	goto	l5
   947  01FD6E                     l841:
   948                           
   949                           ;delay.c: 7: {
   950                           ;delay.c: 8: _delay((unsigned long)((1)*(25000000/4000.0)));
   951  01FD6E  0E09               	movlw	9
   952  01FD70  6E03               	movwf	??_delay_ms& (0+255),c
   953  01FD72  0E1C               	movlw	28
   954  01FD74                     u247:
   955  01FD74  2EE8               	decfsz	wreg,f,c
   956  01FD76  D7FE               	goto	u247
   957  01FD78  2E03               	decfsz	??_delay_ms& (0+255),f,c
   958  01FD7A  D7FC               	goto	u247
   959  01FD7C  D000               	nop2	
   960  01FD7E  4A04               	infsnz	delay_ms@i,f,c
   961  01FD80  2A05               	incf	delay_ms@i+1,f,c
   962  01FD82                     l5:
   963  01FD82  5001               	movf	delay_ms@x,w,c
   964  01FD84  5C04               	subwf	delay_ms@i,w,c
   965  01FD86  5005               	movf	delay_ms@i+1,w,c
   966  01FD88  0A80               	xorlw	128
   967  01FD8A  6E03               	movwf	??_delay_ms& (0+255),c
   968  01FD8C  5002               	movf	delay_ms@x+1,w,c
   969  01FD8E  0A80               	xorlw	128
   970  01FD90  5803               	subwfb	??_delay_ms& (0+255),w,c
   971  01FD92  B0D8               	btfsc	status,0,c
   972  01FD94  0012               	return	
   973  01FD96  D7EB               	goto	l841
   974  01FD98                     __end_of_delay_ms:
   975                           	opt stack 0
   976  0000                     wreg	equ	0xFE8
   977                           status	equ	0xFD8
   978                           wreg	equ	0xFE8
   979                           status	equ	0xFD8
   980                           
   981                           	psect	rparam
   982  0000                     wreg	equ	0xFE8
   983                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          128      0       0
    BANK15           96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_normalWashMode
    _normalWashMode->_rinse
    _wash->_spinMotor
    _rinse->_oscillateMotor
    _oscillateMotor->_delay_ms
    _dry->_spinMotor
    _spinMotor->_delay_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4672
                     _normalWashMode
                         _startMotor
                          _stopMotor
 ---------------------------------------------------------------------------------
 (1) _stopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startMotor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _normalWashMode                                       2     2      0    4672
                                             17 COMRAM     2     2      0
                                _dry
                              _rinse
                               _wash
 ---------------------------------------------------------------------------------
 (2) _wash                                                 5     3      2    1606
                                             11 COMRAM     5     3      2
                          _spinMotor
 ---------------------------------------------------------------------------------
 (2) _rinse                                                5     3      2    1436
                                             12 COMRAM     5     3      2
                     _oscillateMotor
 ---------------------------------------------------------------------------------
 (3) _oscillateMotor                                       7     3      4    1304
                                              5 COMRAM     7     3      4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _dry                                                  5     3      2    1563
                                             11 COMRAM     5     3      2
                          _spinMotor
 ---------------------------------------------------------------------------------
 (3) _spinMotor                                            6     2      4    1474
                                              5 COMRAM     6     2      4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             5     3      2     906
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _normalWashMode
     _dry
       _spinMotor
         _delay_ms
     _rinse
       _oscillateMotor
         _delay_ms
     _wash
       _spinMotor
         _delay_ms
   _startMotor
   _stopMotor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     13      13       1       20.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BANK12             100      0       0      28        0.0%
ABS                  0      0       0      29        0.0%
BITBANK12          100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           80      0       0      33        0.0%
BANK14              80      0       0      34        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BIGRAM_1            60      0       0      37        0.0%
BIGRAM             E7F      0       0      38        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Feb 07 14:42:43 2020

                      l5 FD82                       l36 FF10                      l841 FD6E  
                    l905 FF70                      l851 FE58                      l909 FF8E  
                    l925 FFE2                      l933 FDF2                      l941 FE2A  
                    l847 FE48                      l945 FDA2                      l929 FDDA  
                    l937 FE12                      l883 FF0A                      l867 FEB2  
                    l949 FDBA                      l889 FF1C                      l977 FD2C  
                    u247 FD74                      _dry FD98                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000                     ?_dry 000C  
                   _main FD28                     _wash FE08                     dry@i 000F  
                   start 0000             ___param_bank 000010                    ??_dry 000E  
                  ?_main 0001                    ?_wash 000C                    _PORTD 000F83  
                  _TRISD 000F95                    _rinse FDD0                    wash@i 000F  
                  status 000FD8          __initialization FD1A             __end_of_main FD36  
           __end_of_wash FE40                   ??_main 0014                   ??_wash 000E  
          __activetblptr 000000            spinMotor@rate 0006                   ?_rinse 000D  
       __end_of_delay_ms FD98           __CFG_XINST$OFF 000000       spinMotor@direction 0008  
                 rinse@i 0010               __accesstop 0060  __end_of__initialization FD1A  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_rinse FE08  
__size_of_oscillateMotor 00E6                  ??_rinse 000F  __size_of_normalWashMode 002E  
     __size_of_spinMotor 00D2                ?_delay_ms 0001       __size_of_stopMotor 0008  
                __Hparam 0000                  __Lparam 0000                  __pcinit FD1A  
                __ramtop 1000                  __ptext0 FD28                  __ptext1 FD20  
                __ptext2 FD14                  __ptext3 FD36                  __ptext4 FE08  
                __ptext5 FDD0                  __ptext6 FF12                  __ptext7 FD98  
                __ptext8 FE40                  __ptext9 FD64             __size_of_dry 0038  
             ??_delay_ms 0003     end_of_initialization FD1A        __end_of_spinMotor FF12  
         _oscillateMotor FF12        __end_of_stopMotor FD28               _startMotor FD14  
         _normalWashMode FD36   __end_of_oscillateMotor FFF8      start_initialization FD1A  
            __end_of_dry FDD0   __end_of_normalWashMode FD64          ?_oscillateMotor 0006  
      __size_of_delay_ms 0034              ?_startMotor 0001          ?_normalWashMode 0001  
         __size_of_rinse 0038                delay_ms@i 0004                delay_ms@x 0001  
             rinse@cycle 000D                _spinMotor FE40      __size_of_startMotor 0006  
              _stopMotor FD20               spinMotor@i 000A      normalWashMode@cycle 0012  
               __Hrparam 0000                 __Lrparam 0000               ?_spinMotor 0006  
             ?_stopMotor 0001                 _delay_ms FD64            __size_of_main 000E  
          __size_of_wash 0038         ??_oscillateMotor 000A                wash@cycle 000C  
               dry@cycle 000C         ??_normalWashMode 0012             ??_startMotor 0001  
            ??_spinMotor 000A       __end_of_startMotor FD1A              ??_stopMotor 0001  
     oscillateMotor@rate 0006       oscillateMotor@step 0008          oscillateMotor@j 000B  
